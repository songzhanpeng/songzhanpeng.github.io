import{_ as s,c as a,o as l,V as n}from"./chunks/framework.3bce2be7.js";const C=JSON.parse('{"title":"智能合约开发2","description":"智能合约","frontmatter":{"title":"智能合约开发2","description":"智能合约","date":"2022-05-010","tags":["区块链"]},"headers":[],"relativePath":"posts/智能合约开发2.md"}'),t={name:"posts/智能合约开发2.md"},o=n(`<h3 id="合约的组成" tabindex="-1">合约的组成 <a class="header-anchor" href="#合约的组成" aria-label="Permalink to &quot;合约的组成&quot;">​</a></h3><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier:  MIT //开源协议</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//编译器版本要大于0.8.0</span></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#FFCB6B;"> Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//定义合约</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">uint</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//状态变量</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		counter </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	funtion </span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//合约函数</span></span>
<span class="line"><span style="color:#A6ACCD;">		counter</span><span style="color:#89DDFF;">+=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="solidity-语言" tabindex="-1">solidity 语言 <a class="header-anchor" href="#solidity-语言" aria-label="Permalink to &quot;solidity 语言&quot;">​</a></h3><ul><li>静态类型、编译型、高级语言</li><li>针对 EVM 专门设计 zh</li><li>受 c++、javascript 等语言影响</li><li>文档<a href="https://learnblockchain.cn/docs/solidity/" target="_blank" rel="noreferrer">中文</a>,<a href="https://docs.soliditylang.org/" target="_blank" rel="noreferrer">官方</a></li></ul><h3 id="solidity-数据类型" tabindex="-1">solidity 数据类型 <a class="header-anchor" href="#solidity-数据类型" aria-label="Permalink to &quot;solidity 数据类型&quot;">​</a></h3><ul><li>值类型 <ul><li>布尔、整型、定长浮点型、定长字节数组、枚举、函数类型、地址类型</li><li>十六进制常量、有理数和整型常量、字符串常量、地址常量</li></ul></li><li>引用类型 <ul><li>结构体</li><li>数组</li></ul></li><li>映射类型</li></ul><h4 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h4><p>int/uint,uint8...uint256</p><p>支持的运算符</p><ul><li>比较运算：&lt;=,&lt;,==,!=,&gt;=,&gt;</li><li>位运算：&amp;,|,^(异或),~(位取反)</li><li>算数运算：+,-,*,/,%（取余数）,**（幂）</li><li>移位：&lt;&lt;(左移),&gt;&gt;(右移)</li></ul><p>在使用整型时，要特别注意整型的大小及所能容纳的最大值和最小值，如 uint8 的最大值是 0xff(255),最小值是 0</p><p>从 solidity0.6.0 版本开始可以通过 Type(T).min 和 Type(T).max 获得整型的最小值和最大值</p><h4 id="地址类型" tabindex="-1">地址类型 <a class="header-anchor" href="#地址类型" aria-label="Permalink to &quot;地址类型&quot;">​</a></h4><p>solidity 使用地址类型来表示一个账号，地址类型有两种形式</p><ul><li>address:一个 20 字节的值</li><li>address payable:表示可支付地址，与 address 相同也是 20 字节，不过它有成员函数 transfer 和 send</li></ul><p>成员函数</p><ul><li><code>&lt;address&gt;balance(uint256)</code>:返回地址的余额</li><li><code>&lt;address payable&gt;transfer(uint256 amount)</code>:向地址发送以太币，失败时抛出异常</li><li><code>&lt;address payable&gt;send(uint256 amount) returns(bool)</code>:向地址发送以太币，失败时返回 false</li><li>3 个底层成员函数：call,delegatecall,staticcall 例如<code>&lt;address&gt;.call(bytes memory) returns (bool, bytes memory)</code>，通常用于合约交互，直接控制编码的方式调用合约函数</li></ul><h4 id="合约类型" tabindex="-1">合约类型 <a class="header-anchor" href="#合约类型" aria-label="Permalink to &quot;合约类型&quot;">​</a></h4><p>每个合约都是一个类型</p><p>合约可以显示地转换为 address 类型，从而可以使用地址类型的成员函数</p><p>这段时间太忙了，先学到这吧...挖坑，后面再填</p>`,21),e=[o];function p(i,r,c,d,y,u){return l(),a("div",null,e)}const h=s(t,[["render",p]]);export{C as __pageData,h as default};
